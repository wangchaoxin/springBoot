inline method:
    在调用点插入函数主体，然后移除该函数
    函数主体与函数名一样通俗易懂
replace temp with query:
    你的程序用一个临时变量保存表达式的运算结果，这样临时变量可以被其他函数调用,通常是exact method之前必不可少的一个步骤
    将这个表达式提炼到一个独立的函数中，将这个临时变量的所有引用替换为对新函数的调用
创建临时变量
    针对每次赋值，创造一个独立、对应的临时变量,每个变量只承担一个职责
取消对临时变量赋值：
    代码对一个参数进行赋值
    以一个临时变量取代该参数位置
7  在对象之间搬移特性  move  method，move field
    如果一个函数和另一个类有更多交流，
Encapsulate fields
    将字段封装get set，引用的地方调用get set 方法
    当子类想要访问父类的字段时
Delegate
    将字段方法搬移到代理类中
Extract class
    某个类做了两个类做的事情，建立一个新类，将字段和方法搬移到新类中
    一个类应该是一个清楚的抽象，处理一些明确的职责
Inline class
    将类内联化
    如果一个类没有做很多事情
    将这个类的所有特性搬到另一个类中，然后移除原类
8  重新组织数据
以对象取代数据值
    你有一个对象，需要和其他对象的数据和行为结合在一起才有意义，
    将数据项变为对象
以字面常量代替魔法数
封装集合
    在集合的持有类中添加对集合的添加、删除、遍历操作
以状态对象，子类，取代类型码
    switch case 中的状态码用子类或者策略模式替代
8 简化条件表达式
    分解条件表达式：
        从if else 中分别提取出独立的函数
        使用三元操作符代替if else
    合并重复条件片段：
        条件表达式每个分支上都有相同代码，将这段重复代码搬移到条件表达式之外
    以卫语句代替条件表达式：
        函数中的逻辑使人难以看清正常的执行逻辑，以卫语句代替所有特殊情况
        if() return   卫语句要不从函数中返回，要不就抛出异常
        if() return
    以多态取代条件表达式
        将这个条件表达式的每个分支放进一个子类的复写函数中，然后将原始函数声明为抽象函数
    引入null对象
        你需要再三检查对象是否为null,将null值替换为null对象
        NullConsumer->Consumer  函数返回自定义的默认值，null对象一定是常量
10  简化函数调用
    引入参数对象:
        某些参数总是很自然地同时出现，以一个对象取代这些参数
    以工厂函数取代构造函数
        你希望在创建对象时不仅仅是简单的构建动作，将构造函数替换为工厂函数
        根据服从创建子类对象：
            static Employee create(String className){
                return class.forName(className).newInstance();
            }
    封装向下转型：
        某个函数返回的对象，需要用函数调用者执行向下转型
        将向下转型移动到函数中
    以异常取代错误码：
        某个函数返回一个特定的错误码，用来表示某种错误情况
        改用异常
        程序中出现错误的地方，不一定知道如何处理错误，需要让他的调用者知道这个错误

        