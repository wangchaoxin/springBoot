volumes  必须添加，否则数据不存储

image:
    docker将所有应用的文件打包成镜像，push到仓库，直接运行image

容器：
    容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的
    独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、
    自己的进程空间，甚至自己的用户 ID 空间
docker registry
    一个 Docker Registry 中可以包含多个仓库（Repository） ；每个仓库可以包含多
    个标签（Tag） ；每个标签对应一个镜像。
镜像：
    下载: docker pull ubuntu:14.04
    运行：docker run -it --rm ubuntu:14.04 bash
         -it ：这是两个参数，一个是 -i ：交互式操作，一个是 -t 终端
         bash ：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash
         -d  : 后台运行
         -p 80:80:端口映射
    列表：docker image ls -q   -q 只显示id
    多层存储:
         镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，
         是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。
    进入容器：docker exec -it webserver bash
DockerFile 定制镜像:
    Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令
    构建一层，因此每一条指令的内容，就是描述该层应当如何构建
    Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令
    构建一层，因此每一条指令的内容，就是描述该层应当如何构建
FROM指定基础镜像：
    所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行
    了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而
    FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并
    且必须是第一条指令。
空白镜像：scratch
    这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像
    如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础
RUN 执行命令
    RUN 指令是用来执行命令行命令的。由于命令行的强大能力， RUN 指令在定制
    镜像时是最常用的指令之一。其格式有两种
    shell 格式： RUN <命令>，就像直接在命令行中输入的命令一样
    exec 格式： RUN ["可执行文件", "参数1", "参数2"] ，这更像是函数调用中
    的格式。
    注意：不应该使用多个指令，应该使用一个RUN指令，并通过 && 将指令串起来,指令中支持 \换行，#注释,清理无关文件
构建镜像：
    docker build -t nginx:v3 .    终镜像的名称 -t nginx:v3   会
    docker build [选项] <上下文路径/URL/->
上下文：
    看到 docker build 命令最后有一个 . 。 . 表示当前目录
    这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路
    径， docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上
    传给 Docker 引擎

    COPY ../package.json /app 或者 COPY /opt/xxxx /app 无法工
    作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位
    置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。

CS模型：
    Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具
    Docker 的引擎提供了一组 REST API，
    被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这
    使用 Dockerfile 定制镜像组 API 与 Docker 引擎交互，从而完成各种功能
    其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的
Dockerfile指令详解：
    COPY复制文件
        COPY package.json /usr/src/app/
            COPY <源路径>... <目标路径>
            COPY ["<源路径1>",... "<目标路径>"]
        <目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工
        作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存
        在会在复制文件前先行创建缺失目录。
        此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如
        读、写、执行权限、文件变更时间等。
    ADD:
        The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path
        ADD [--chown=<user>:<group>] <src>... <dest>
        ADD hom* /mydir/        # adds all files starting with "hom"
        ADD hom?.txt /mydir/    # ? is replaced with any single character, e.g., "home.txt"
        ADD test relativeDir/          # adds "test" to `WORKDIR`/relativeDir/
        ADD test /absoluteDir/         # adds "test" to /absoluteDir/
        更高级的复制文件：仅在需要自动解压缩的场合使用 ADD
        有自动解压功能  ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /
        尽可能的使用 COPY ，因为 COPY 的语
        义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰
    CMD容器启动命令：
        CMD ["executable","param1","param2"] (exec form, this is the preferred form)
        CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
        CMD command param1 param2 (shell form)
        CMD 指令就是用于指定默认的容器主进程的启动命令的
        只能有一个CMD指令
    ENTRYPOINT:
        目的和 CMD 一样，都是在指定容器启动程序及参
        当指定了 ENTRYPOINT 后， CMD 的含义就发生了改变，不再是直接的运行其命
        令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行
        时，将变为：
        <ENTRYPOINT> "<CMD>"
        当存在 ENTRYPOINT 后， CMD 的内容将会作为参数传给 ENTRYPOINT
    RUN:
      RUN <command>
      RUN ["executable", "param1", "param2"]
      The RUN instruction will execute any commands in a new layer on top of the current image and commit the results.
      The resulting committed image will be used for the next step in the Dockerfile.

    ENV 设置环境变量
        This value will be in the environment for all subsequent instructions in the build stage
        就是设置环境变量而已，无论是后面的其它指令，如 RUN ，还
        是运行时的应用，都可以直接使用这里定义的环境变量
        格式有两种：
        ENV <key> <value>
        ENV <key1>=<value1> <key2>=<value2>...
    EXPOSE:
        The EXPOSE instruction does not actually publish the port.
        It functions as a type of documentation between the person who builds the image and the person who
        runs the container, about which ports are intended to be published. To actually publish the port when
        running the container, use the -p flag on docker run to publish and map one or more ports
        docker run -p 80:80/tcp -p 80:80/udp ...








