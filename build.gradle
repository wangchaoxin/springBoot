buildscript {

    /**设置外部属性，$springBootVersion访问属性*/
    //额外的属性可以通过所属对象的 ext 属性进行添加，读取和设置。或者，可以使用 ext 块同时添加多个属性
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        //打成jar包的插件
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/************plugin***************/

apply plugin: 'java'
apply plugin: 'base'    //The base plugin works with the settings to create an archive file called basic-demo-1.0.zip in the build/distributions folder.
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'  /**打成zip包的插件，执行gradle build,能生成可执行脚本*/
//apply plugin: 'war'     /**由于继承自 Java 插件，当你执行 gradle build 时，将会编译、测试、打包你的工程。Gradle 会在 src/main/webapp 下寻找 Web 工程文件。编译后的 classes 文件以及运行时依赖也都会被包含在 War 包中。*/
/************plugin***************/


group = 'com.wcx.springboot'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = 0.2
def appMainClass = 'DemoApplication'

/*********maven仓库************/
/**一个项目可以采用多个库。Gradle 会按照顺序从各个库里寻找所需的依赖文件，并且一旦找到第一个便停止搜索*/
repositories {
    mavenLocal()
    mavenCentral()
    /**自定义仓库*/
    /*maven {
        url "http://repo.mycompany.com/maven2"
    }*/
}
/*********maven仓库************/

/**修改插件属性,设置启动类，可以直接通过java -jar  a.jar 启动程序*/
jar {
    mainClassName = appMainClass
    //每个 jar 或 war 对象都有一个单独的 Manifest 实例的 manifest 属性。当生成 archive 时，相应的 MANIFEST.MF 文件也会被写入进去。
    manifest {
        attributes 'MainClass': 'com.wcx.springboot.demo.DemoApplication'
    }
}


/************依赖***************/
/**gradle dependencies：查看依赖文件*/
dependencies {
    /**依赖简写方式:group:name:version*/
    //排除依赖
    compile('org.springframework.boot:spring-boot-starter') {
        //        exclude module: 'spring-boot-starter-logging'
    }
    compile('org.springframework.boot:spring-boot-starter-web')
    /**在编译时需要，由运行时提供*/
    //providedCompile('javax:servlet:servlet-api:2.5')

    /**指定依赖某一版本，默认依赖最近的版本,spring boot会自动选择依赖的版本
     * runtime：编译时不需要，运行时打包到war文件中*/
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile("org.springframework.boot:spring-boot-devtools")
    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile("org.springframework.boot:spring-boot-configuration-processor")
    /**springboot开发者工具，classpath下文件改动会自动重启*/
    compile "org.springframework.boot:spring-boot-devtools"
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    /*mongo orm框架*/
    compile 'org.mongodb.morphia:morphia:1.3.2'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    //rabbitmq
    compile('com.rabbitmq:amqp-client:5.3.0')
    /**测试依赖本地maven仓库jar*/
    //    compile(group: 'vit.vms.api', name: 'arbiter-app', version: '1.0.2-SNAPSHOT')

    implementation 'com.sparkjava:spark-core:2.7.2'
    //log4j2
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    //guice
    implementation 'com.google.inject:guice:4.2.0'
    //mokito
    testCompile 'org.mockito:mockito-core:2.7.22'




}
/************依赖***************/



//使用外部构建脚本配置项目
apply from: 'other.gradle'

/************发布***************/
apply plugin:  'maven-publish'
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url = "C:\\Users\\P1318045\\.m2\\repository"
            //定义不同的publish路径,发布到本地，执行PublishToMavenLocal task
           /* maven {
                def releasesRepoUrl = "$buildDir/repos/releases"
                def snapshotsRepoUrl = "$buildDir/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }*/
        }
    }
}
/************发布***************/
/**添加用于将项目发布到 Maven 仓库的支持，执行gradlew uploadArchives*/
apply plugin: 'maven'
//java plugin中使用的默认任务，使用archives配置上传包括 JAR 文件的构件。
uploadArchives {
    repositories {
        //发布到本地maven仓库
        mavenLocal()
    }
}




