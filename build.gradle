buildscript {

    /**设置外部属性，$springBootVersion访问属性*/
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        //打成jar包的插件
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'    /**构建jar的插件，默认去src/main/java中去找文件*/
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'  /**打成zip包的插件，执行gradle build,能生成可执行脚本*/
//apply plugin: 'war'     /**引入war插件，war插件会自动引入jar插件*/

group = 'com.wcx.springboot'
sourceCompatibility = 1.8


repositories {
    mavenCentral()
}

//修改项目属性，定义jar版本
version = 0.1
def appMainClass = 'DemoApplication'
//修改插件属性,设置启动类，可以直接通过java -jar  a.jar 启动程序
jar {
    mainClassName = appMainClass
    manifest {
        attributes 'MainClass': 'com.wcx.springboot.demo.DemoApplication'
    }
}
/***************Task-start********************/
task zip(type: Zip) {
    from('build/libs') {
        include '*.jar'
    }
    from '$rootDir/config'
}
build.dependsOn(zip)
task printProperties() {
    println("buildDir:" + buildDir+",projectDir:"+projectDir+",rootDir:"+rootDir)
}
/*copy task*/
task copy(type: Copy, group: "Custom", description: "Copies sources to the dest directory") {
    from "src"
    into "dest"
}
/**生成gradle包装器,执行gradle wrapper生成gradlew文件，执行./gradlew进行编译*/
task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}
task first << {
    println("first")
}
/**访问gradle.properties中的属性*/
task second {
    doLast {
        println("My name is $my_name")
    }
}
second.dependsOn("first")  /**依赖任务*/
/***************Task-end********************/

dependencies {
    //排除依赖
    compile('org.springframework.boot:spring-boot-starter') {
        //        exclude module: 'spring-boot-starter-logging'
    }
    compile('org.springframework.boot:spring-boot-starter-web')
    /**在编译时需要，由运行时提供*/
    //providedCompile('javax:servlet:servlet-api:2.5')

    /**指定依赖某一版本，默认依赖最近的版本,spring boot会自动选择依赖的版本
     * runtime：编译时不需要，运行时打包到war文件中*/
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile("org.springframework.boot:spring-boot-devtools")
    testCompile('org.springframework.boot:spring-boot-starter-test')

    /**加此配置，解决ConfigurationProperties注解无效*/
    compile("org.springframework.boot:spring-boot-configuration-processor")
    /**springboot开发者工具，classpath下文件改动会自动重启*/
    compile "org.springframework.boot:spring-boot-devtools"
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    /*mongo orm框架*/
    compile 'org.mongodb.morphia:morphia:1.3.2'
    /*thrift*/
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.0'
    /*gson*/
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    testCompile group: 'junit', name: 'junit', version: '4.11'


    compile ('com.rabbitmq:amqp-client:5.3.0')

}

/**
 * 改变默认项目输出目录
 */
/*
sourceSets {
    main {
        java {
            srcDirs = ['src']  //设置默认的源码目录为src
        }
        test {
            java {
                srcDirs = ['test']  //设置默认的测试目录为test
            }
        }
    }
}
*/

/**改变项目输出路径到out目录*/
//buildDir = 'out'



